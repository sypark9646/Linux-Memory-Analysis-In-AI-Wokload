# -*- coding: utf-8 -*-
"""accessCount.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19aZhhbejhQukItUKFa8A1pikJco_YskK
"""

import pandas as pd
import argparse
import os
import sys

def main(read_file_name, chunksize):
  index = read_file_name.rfind(".")
  write_file_name = read_file_name[:index]
  chunks = pd.read_csv(read_file_name,chunksize=chunksize, skiprows = 1, names=['type', 'address', 'size', 'block_address'], skipinitialspace=True, delim_whitespace=True, lineterminator="\n")
  pieces = [x.groupby(['type', 'block_address']).size().reset_index(name='count') for x in chunks]

  agg = pd.concat(pieces).groupby(['type', 'block_address'])['count'].sum().reset_index(name='count')
  agg.to_csv(f"{write_file_name}_aggregated.csv", index=False)

def is_valid_file(parser, arg):
  if not os.path.exists(arg):
      parser.error("The file %s does not exist" % arg)
  else:
      return arg
      
      
if __name__ == "__main__":
  parser = argparse.ArgumentParser(description = 'preprocess to count group by type and block_adderss')
  parser.add_argument("-i", dest="filename", required=True,
                    help="input cleared trace data",
                    type=lambda x: is_valid_file(parser, x))
  parser.add_argument("-c", dest="step", default=1000000, type=int,
                    help="checkpoint for step")
  args = parser.parse_args()
  main(args.filename, args.step)
